version: "3.5"
services:
  opensearch:
    container_name: temporal-opensearch
    environment:
      - discovery.type=single-node
      - OPENSEARCH_JAVA_OPTS=-Xms256m -Xmx256m
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=512mb
      - cluster.routing.allocation.disk.watermark.high=256mb
      - cluster.routing.allocation.disk.watermark.flood_stage=128mb
      - plugins.security.disabled=true
    image: opensearchproject/opensearch:${OPENSEARCH_VERSION}
    ulimits:
#      memlock:
#        soft: -1 # Set memlock to unlimited (no soft or hard limit)
#        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    networks:
      - temporal-network
    expose:
      - 9200
    volumes:
      - /usr/share/opensearch/data
  postgresql:
    container_name: temporal-postgresql
    environment:
      POSTGRES_PASSWORD: temporal
      POSTGRES_USER: temporal
    image: postgres:${POSTGRESQL_VERSION}
    networks:
      - temporal-network
    expose:
      - 5432
    volumes:
      - /var/lib/postgresql/data
  temporal:
    container_name: temporal
    depends_on:
      - postgresql
      - opensearch
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development-sql.yaml
      - ENABLE_ES=true
      - ES_SEEDS=opensearch
      - ES_VERSION=v7
      - PROMETHEUS_ENDPOINT=0.0.0.0:8000
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    networks:
      - temporal-network
    ports:
      - "7233:7233"
      - "8000:8000"
    labels:
      kompose.volume.type: configMap
    volumes:
      - ./dynamicconfig:/etc/temporal/config/dynamicconfig
  temporal-admin-tools:
    container_name: temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_HOST}
      - TEMPORAL_CLI_ADDRESS=${TEMPORAL_HOST}
    image: temporalio/admin-tools:${TEMPORAL_VERSION}
#    restart: on-failure
    networks:
      - temporal-network
    stdin_open: true
    tty: true
    volumes:
      - ./deployment/admin:/etc/temporal/startup/
#    entrypoint: ["/bin/bash","-c"]
#    command: echo 'SETUP TEMPORAL NAMESPACE'
#      - |
#        echo 'SETUP TEMPORAL NAMESPACE'
#        sh /etc/temporal/startup/setup.sh
  temporal-ui:
    container_name: temporal-ui
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=${TEMPORAL_HOST}
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    networks:
      - temporal-network
    ports:
      - "8080:8080"
  prometheus:
    container_name: prometheus
    image: prom/prometheus:${PROMETHEUS_VERSION}
    ports:
      - "9090:9090"
    volumes:
      - type: bind
        source: ./deployment/prometheus/prometheus.yml
        target: /etc/prometheus/prometheus.yml
    depends_on:
      - temporal
    networks:
      - temporal-network
  grafana:
    container_name: grafana
    image: grafana/grafana:${GRAFANA_VERSION}
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - "8085:3000"
    volumes:
      - ./deployment/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./deployment/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - temporal-network

networks:
  temporal-network:
    driver: bridge
    name: temporal-network
